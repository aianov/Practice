/*

Привет! спасибо за то что читаешь мой js файл. тут я изучал методы и функции для массивов. 13:08 - 11.02.2023

Array.isArray()
push() - добавить в конец
pop() - удалить конец
shift() - удалить начало
concat() - лучше использовать "..."
includes() - ищет какую то строчку
split() и join()

flat()
reverse()

forEach()
sort()

slice(), splice() - [1,2,3] => [2,3] || [2] || [1,3]

*/



/* ============================================= Проверка массива на массив ============================================ */

// Array.isArray()
const array = [];
console.log(array); // [], просто вывели пустой массив, кстати ее lenght: 0
console.log(typeof array); // object, немного неверно да? ведь можно спутать массив с обьектом, и чтобы проверить является ли массив массивом мы просто используем это:
console.log(Array.isArray(array)); // true, все верно. выдает boolean значение



/* ============================================= Добавление значений в массив ============================================ */

// Старая механика вложения значений в массив
const myArray = [];
myArray[0] = '1';
myArray[1] = '2';
console.log(myArray); // ['1', '2'], это старая механика заполнения массивов. сейчас лучше использовать функцию push() - она толкает значения в самый конец массива

// push() unshift() корректное добавление значений
const mytruearray = [1,2,3];
mytruearray.push(4); // push() добавляет данные в самый конец указанного массива
mytruearray.unshift(0); // unshift() добавляет данные в самое начало указанного массива
console.log(mytruearray); // [0,1,2,3,4] все верно
//ВАЖНО: мы можем добавлять true string number и другие значения в массив и даже объекты:
/*
        mytruearray.push({
            name: 'nics',
            age: 16
        })
*/



/* ============================================= Удаление значений в массиве ============================================ */

// .pop() удаляет самое последнее значение в массиве
const array2 = [1,2,3];
array2.pop(); // ничего не указываем. просто вызываем и оно само удалит нам тройку в массиве array2
console.log(array2); // [1,2], все верно

// .shift() удаляет с самого начала
array2.shift();
console.log(array2); // [2]



/* ============================================= Конкатенация массивов ============================================ */

// СТАРЫЙ СПОСОБ СОЕДИНЕНИЯ МАССИВОВ: concat()
const array3 = [1,2,3];
const array4 = [4,5,6];
const concat = array3.concat(array4); // взяло и соединило array3 и array4
console.log(concat); // [1,2,3,4,5,6]

// Лучше использовать этот способ, называется "диструктуризация"
const trueconcat = [...array3, ...array4]; // так намного легче
console.log(trueconcat); // [1,2,3,4,5,6], вывод одинаков
//кстати абсолютно неважно какое значение вы запихнете, обьекст true false number string неважно



/* ============================================= Проверка какого либо значения в массиве ============================================ */

// includes() проверяет какое то значение в массиве выдавая true / false
const array5 = [1,2,3];
console.log(array5.includes(3)); // true, оно проверило число 3 в массиве array5
// ВАЖНО: оно не может найти массив или объект



/* ============================================= Переделывание строчек в массив ============================================ */

// .split('') делит строчку на массив
const fio = 'Дулат Никсов Никсович';
console.log(fio.split(' ')); //['Дулат', 'Никсов', 'Никсович']
console.log(fio.split('')); //поделит каждую букву и каждый пробел и запишет их всех в один большой массив

// .join('') склеивает все значения в массиве через указанное внутри скобках значение.
const array6 = fio.split(' '); // ['Дулат', 'Никсов', 'Никсович']
console.log(array6.join(' ')); // Дулат Никсов Никсович, важно заметить что оно переделала его в string значение
console.log(array6.join(' - ')); // Дулат - Никсов - Никсович, ну думаю все понятно

const array7 = fio.split(''); // ['Д', 'у', 'л', 'а', 'т', ' ', 'Н', 'и', 'к', 'с', 'о', 'в', ' ', 'Н', 'и', 'к', 'с', 'о', 'в', 'и', 'ч']
console.log(array7.join('')) // Дулат Никсов Никсович
console.log(array7.join(' ')); // Д у л а т   Н и к с о в   Н и к с о в и ч



/* ============= .flat() .reverse(), flat убирает вложенность массивов в массиве, а reverse переварачивает массив ===================== */

// .flat()
const array8 = [[1,2], [3], 4, [5,6]]; //давайте его сделаем единым целым, однородным и плоским с помощью flat.
console.log(array8.flat()); // [1, 2, 3, 4, 5, 6], берет абсолюнто все данные из ПЕРВОГО массива, раскрывает их и закидывает в главный массив

const array9 = [[1,2], [[3]], 4, [[5],6]];
console.log(array9.flat()); // [1, 2, Array(1), 4, Array(1), 6], flat не справился, потому что оно удаляет все массивы из ПЕРВОЙ вложенности, а из вторрой и дальше оно не может, но можно указать вложенность:
console.log(array9.flat(2)); // [1, 2, 3, 4, 5, 6] мы указали что развернем массивы до второго уровня вложенности.

const array10 = [[[1]], [[[[[[[[[[[[[[[[2]]]]]]]]]]]]]]]], [3]];
console.log(array10.flat(Infinity)); // [1, 2, 3] можно указать Infinity который будет убирать абсолютно все вложенные массивы до первой вложенности

// .reverse()
const array11 = [1,2,3];
console.log(array11.reverse()); // [3,2,1] переворачивает значения в массиве, все что было в начале теперь в конце, а все что в конце теперь в начале.



/* ========================================= Сортировка массива .sort() .slice() .splice() ============================================ */

// .sort() может отсортировать как и от меньшего к большему так и от большего к меньшему, может отсортировать обьекты строчки и тд
// изучать slice и splicec мы не будем но можно посмотреть на других источниках в кратце slice splice просто может удалить что то из начала из конца в центре и тд



/* ========================================= Полезная функция для массивов .forEach() ============================================ */

// Старый способ написать все данные из массива:
const array12 = [1,2];
for (i=0;i<array12.length;i++) {
    const value = array12[i];
    console.log(value); // 1 2 3 4 5 6 7 8 в консоли поочередно
}

// Правильный, рекомендуемый способ с помощью .forEach();
array12.forEach((element) => {
    console.log(element); // 1 2 3 4 5 6 7 8, мы создали переменную element в которую прописывали поочередно значение каждого элемента в массиве поочередно. и записанные данные мы сразу выводили в консоль.
});
// ВАЖНО: Внутри forEach() мы не сможем использовать continue и break
// А ЕЩЕ: Не важно какой тип данных в нашем массиве, forEach все равно будет вписывать в консоль поочередно ВСЕ элементы в массив. boolean значение, string, number, object, array вообще все-равно



/* ========================================= ЗАДАЧКА ДЛЯ ЗАКРЕПЛЕНИЯ ВСЕГО ОБУЧЕННОГО ============================================ */

const exer = 'text1,Text 2,text 3,text123,TeXt 3'
//переделать в: '#text1 #text_2 #text_3';

const final = [];
const step1 = exer.toLowerCase();
const step2 = step1.split(',');
step2.forEach((tag) => {
    const test = tag.split(' ').join('_');
    final.push('#'+test);
});
const absolutefinal = final.join(' ');
console.log(absolutefinal); // Вывод: #text1 #text_2 #text_3 #text123 #text_3

//ГОТОВО!
//ВАЖНО: ЧТОБЫ ИЗБАВИТЬСЯ ОТ ПРОБЕЛОВ В ЛЮБОМ МАССИВЕ ИСПОЛЬЗУЕМ -> array.split(' ').join('')
